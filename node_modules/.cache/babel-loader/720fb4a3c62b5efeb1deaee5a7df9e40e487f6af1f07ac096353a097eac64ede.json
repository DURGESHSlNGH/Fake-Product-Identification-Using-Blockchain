{"ast":null,"code":"import{useEffect,useState}from'react';import{ethers}from'ethers';import{BrowserRouter as Router,Route,Routes}from'react-router-dom';// Components\nimport Navigation from'./components/Navigation';import Home from'./components/Home';import VerifyProduct from'./components/VerifyProduct';import AddProduct from'./components/AddProduct';import GetContract from'./components/GetContract';// ABIs\nimport CentralABI from'./abis/Cental_ABI.json';// Config\nimport config from'./config.json';import DeployContract from'./components/DeployContract';// const Home = () => <div>Home Page</div>;\n// const About = () => <div>About Page</div>;\n// const Contact = () => <div>Contact Page</div>;\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[provider,setProvider]=useState(null);const[central,setCentral]=useState(null);const[account,setAccount]=useState(null);function showErrorMessage(error){alert(`An error occurred while connecting to MetaMask: ${error.message}  '\\n'  'Check if you have metamask wallet installed'`);}const loadBlockchainData=async()=>{try{const provider=new ethers.providers.Web3Provider(window.ethereum);const signer=await provider.getSigner();setProvider(provider);const network=await provider.getNetwork();const central=new ethers.Contract(config[network.chainId].central.address,CentralABI,signer);setCentral(central);}catch(error){console.log(error);showErrorMessage(error);}};useEffect(()=>{loadBlockchainData();});return/*#__PURE__*/_jsxs(Router,{children:[/*#__PURE__*/_jsx(Navigation,{account:account,provider:provider,central:central,setAccount:setAccount}),/*#__PURE__*/_jsxs(Routes,{children:[/*#__PURE__*/_jsx(Route,{path:\"/\",element:/*#__PURE__*/_jsx(Home,{})}),/*#__PURE__*/_jsx(Route,{path:\"/createcontract\",element:/*#__PURE__*/_jsx(DeployContract,{account:account,provider:provider,central:central})}),/*#__PURE__*/_jsx(Route,{path:\"/getcontract\",element:/*#__PURE__*/_jsx(GetContract,{account:account,provider:provider,central:central})}),/*#__PURE__*/_jsx(Route,{path:\"/addproduct\",element:/*#__PURE__*/_jsx(AddProduct,{account:account,provider:provider,central:central})}),/*#__PURE__*/_jsx(Route,{path:\"/verify\",element:/*#__PURE__*/_jsx(VerifyProduct,{account:account,provider:provider,central:central})})]})]});}export default App;","map":{"version":3,"names":["useEffect","useState","ethers","BrowserRouter","Router","Route","Routes","Navigation","Home","VerifyProduct","AddProduct","GetContract","CentralABI","config","DeployContract","jsx","_jsx","jsxs","_jsxs","App","provider","setProvider","central","setCentral","account","setAccount","showErrorMessage","error","alert","message","loadBlockchainData","providers","Web3Provider","window","ethereum","signer","getSigner","network","getNetwork","Contract","chainId","address","console","log","children","path","element"],"sources":["C:/Users/durge/Downloads/Fake-Product-Identification-Using-Blockchain/Fake Product Identification Using Blockchain/src/App.js"],"sourcesContent":["import { useEffect, useState } from 'react'\r\nimport { ethers } from 'ethers'\r\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\r\n\r\n\r\n\r\n// Components\r\nimport Navigation from './components/Navigation';\r\nimport Home from './components/Home';\r\nimport VerifyProduct from './components/VerifyProduct';\r\nimport AddProduct from './components/AddProduct';\r\nimport GetContract from './components/GetContract'\r\n\r\n// ABIs\r\nimport CentralABI from './abis/Cental_ABI.json';\r\n\r\n// Config\r\nimport config from './config.json';\r\nimport DeployContract from './components/DeployContract';\r\n\r\n\r\n// const Home = () => <div>Home Page</div>;\r\n// const About = () => <div>About Page</div>;\r\n// const Contact = () => <div>Contact Page</div>;\r\n\r\n\r\nfunction App() {\r\n  const [provider, setProvider] = useState(null);\r\n  const [central, setCentral] = useState(null);\r\n\r\n  const [account, setAccount] = useState(null);\r\n\r\n  function showErrorMessage(error) {\r\n    alert(`An error occurred while connecting to MetaMask: ${error.message}  '\\n'  'Check if you have metamask wallet installed'`);\r\n  }\r\n\r\n  const loadBlockchainData = async () => {\r\n    try{\r\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n      const signer = await provider.getSigner();\r\n      setProvider(provider);\r\n      const network = await provider.getNetwork();\r\n\r\n      const central = new ethers.Contract(config[network.chainId].central.address, CentralABI, signer);\r\n      setCentral(central);\r\n    }catch(error){\r\n      console.log(error);\r\n      showErrorMessage(error);\r\n    }\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadBlockchainData()\r\n  },)\r\n\r\n  return (\r\n    <Router>\r\n      <Navigation account={account} provider={provider} central={central} setAccount={setAccount} />\r\n      <Routes>\r\n\r\n        <Route path=\"/\" element={ <Home/> } />\r\n        <Route \r\n          path=\"/createcontract\" \r\n          element = {<DeployContract  account={account} provider={provider} central={central} />}\r\n        />\r\n        <Route \r\n          path=\"/getcontract\" \r\n          element = {<GetContract  account={account} provider={provider} central={central} />}\r\n        />\r\n        <Route \r\n          path=\"/addproduct\"  \r\n          element = {<AddProduct account={account} provider={provider} central={central} />}\r\n        />\r\n\r\n        <Route \r\n          path=\"/verify\" \r\n          element = {<VerifyProduct  account={account} provider={provider} central={central} />}\r\n        />\r\n      </Routes>\r\n    </Router>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}